import serial
import struct
from time import sleep
import numpy as np
import random


class Backend:
    def __init__(self, port: str, baudrate: int, wrapper: object):
        self.port = port
        self.baudrate = baudrate
        # self.ser = serial.Serial('COM3', baudrate=self.baudrate, timeout=1)
        self.byte_length = 6000
        self.start_command = b'0xa0b0'
        self.stop_command = b'0xa1b1'
        self.start_bytes = b'0xffa0'
        self.wrapper = wrapper

    def read_data1(self, number_of_instances):
        custom_data = np.array([(i, random.randint(1, 480)) for i in range(1, 500)])
        custom_data1 = np.array([
            [457.21, 8779.584],
            [457.80, 8895.733],
            [458.38, 9010.885],
            [458.96, 9126.944],
            [459.55, 9238.880],
            [460.13, 9352.736],
            [460.71, 9458.473],
            [461.30, 9564.340],
            [461.88, 9670.698],
            [462.46, 9769.005],
            [463.05, 9868.751],
            [463.63, 9963.769],
            [464.21, 10057.045],
            [464.79, 10154.188],
            [465.38, 10250.243],
            [465.96, 10344.663],
            [466.54, 10438.102],
            [467.13, 10532.271],
            [467.71, 10622.635],
            [468.29, 10713.082],
            [468.87, 10796.979],
            [469.46, 10882.715],
            [470.04, 10963.223],
            [470.62, 11043.936],
            [471.21, 11120.855],
            [471.79, 11188.895],
            [472.37, 11258.880],
            [472.95, 11322.631],
            [473.54, 11379.203],
            [474.12, 11429.567],
            [474.70, 11474.739],
            [475.28, 11514.791],
            [475.87, 11543.533],
            [476.45, 11566.325],
            [477.03, 11581.378],
            [477.61, 11590.911],
            [478.19, 11596.783],
            [478.78, 11595.855],
            [479.36, 11584.338],
            [479.94, 11574.554],
            [480.52, 11552.802],
            [481.11, 11525.042],
            [481.69, 11496.386],
            [482.27, 11458.853],
            [482.85, 11423.938],
            [483.43, 11384.009],
            [484.01, 11340.806],
            [484.60, 11298.320],
            [485.18, 11256.148],
            [485.76, 11209.428],
            [486.34, 11163.289],
            [486.92, 11113.509],
            [487.51, 11064.299],
            [488.09, 11014.469],
            [488.67, 10956.881],
            [489.25, 10907.919],
            [489.83, 10854.484],
            [490.41, 10799.523],
            [490.99, 10744.871],
            [491.58, 10686.983],
            [492.16, 10628.404],
            [492.74, 10566.282],
            [493.32, 10505.317],
            [493.90, 10437.386],
            [494.48, 10376.872],
            [495.06, 10310.115],
            [495.64, 10243.312],
            [496.23, 10172.438],
            [496.81, 10104.526],
            [497.39, 10038.534],
            [497.97, 9969.796],
            [498.55, 9905.130],
            [499.13, 9838.897],
            [499.71, 9774.132],
            [500.29, 9705.678],
            [500.87, 9637.301],
            [501.45, 9574.701],
            [502.03, 9513.159],
            [502.61, 9453.005],
            [503.20, 9388.819],
            [503.78, 9330.105],
            [504.36, 9269.427],
            [504.94, 9213.487],
            [505.52, 9157.390],
            [506.10, 9099.154],
            [506.68, 9040.371],
            [507.26, 8986.088],
            [507.84, 8928.034]
        ])

        return custom_data1

    def inch_uzem_kenem(self, num):
         return np.array([(i, random.randint(1, 480)) for i in range(1, 500)])

    def read_data2(self):
        custom_data = np.array([
            [457.21, -9.716],
            [457.80, -9.692],
            [458.38, -9.598],
            [458.96, -9.736],
            [459.55, -9.860],
            [460.13, -10.310],
            [460.71, -9.974],
            [461.30, -10.394],
            [461.88, -10.363],
            [462.46, -11.554],
            [463.05, -11.309],
            [463.63, -11.764],
            [464.21, -11.530],
            [464.79, -11.219],
            [465.38, -10.628],
            [465.96, -10.322],
            [466.54, -10.022],
            [467.13, -9.707],
            [467.71, -9.809],
            [468.29, -9.303],
            [468.87, -9.419],
            [469.46, -9.891],
            [470.04, -10.034],
            [470.62, -9.694],
            [471.21, -8.869],
            [471.79, -9.471],
            [472.37, -9.560],
            [472.95, -9.659],
            [473.54, -9.600],
            [474.12, -9.994],
            [474.70, -10.143],
            [475.28, -10.593],
            [475.87, -10.604],
            [476.45, -10.772],
            [477.03, -10.919],
            [477.61, -10.119],
            [478.19, -10.096],
            [478.78, -9.834],
            [479.36, -10.049],
            [479.94, -10.152],
            [480.52, -10.081],
            [481.11, -9.497],
            [481.69, -9.633],
            [482.27, -9.309],
            [482.85, -9.666],
            [483.43, -10.091],
            [484.01, -9.917],
            [484.60, -10.426],
            [485.18, -10.287],
            [485.76, -11.106],
            [486.34, -11.430],
            [486.92, -11.154],
            [487.51, -10.843],
            [488.09, -10.891],
            [488.67, -10.782],
            [489.25, -10.878],
            [489.83, -11.118],
            [490.41, -11.034],
            [490.99, -12.047],
            [491.58, -12.211],
            [492.16, -11.538],
            [492.74, -11.268],
            [493.32, -11.003],
            [493.90, -10.806],
            [494.48, -10.096],
            [495.06, -9.768],
            [495.64, -10.148],
            [496.23, -10.811],
            [496.81, -11.120],
            [497.39, -10.509],
            [497.97, -10.319],
            [498.55, -10.496],
            [499.13, -10.903],
            [499.71, -10.563],
            [500.29, -9.772],
            [500.87, -9.428],
            [501.45, -9.198],
            [502.03, -9.066],
            [502.61, -8.466],
            [503.20, -8.239],
            [503.78, -8.826],
            [504.36, -8.149],
            [504.94, -7.476],
            [505.52, -6.528],
            [506.10, -7.082],
            [506.68, -6.737],
            [507.26, -6.976],
            [507.84, -6.280],
        ])
        return custom_data

    def read_data3(self):
        custom_data1 = np.array([
            [457.21, 10584.363],
            [457.80, 10758.604],
            [458.38, 10928.373],
            [458.96, 11098.354],
            [459.55, 11263.743],
            [460.13, 11434.461],
            [460.71, 11603.696],
            [461.30, 11771.111],
            [461.88, 11937.384],
            [462.46, 12092.042],
            [463.05, 12244.493],
            [463.63, 12391.158],
            [464.21, 12535.331],
            [464.79, 12686.728],
            [465.38, 12838.047],
            [465.96, 12987.465],
            [466.54, 13134.876],
            [467.13, 13284.123],
            [467.71, 13431.351],
            [468.29, 13578.503],
            [468.87, 13721.158],
            [469.46, 13865.015],
            [470.04, 14004.332],
            [470.62, 14142.855],
            [471.21, 14275.265],
            [471.79, 14409.000],
            [472.37, 14538.343],
            [472.95, 14666.468],
            [473.54, 14790.347],
            [474.12, 14908.186],
            [474.70, 15023.024],
            [475.28, 15132.915],
            [475.87, 15240.741],
            [476.45, 15341.633],
            [477.03, 15438.999],
            [477.61, 15527.793],
            [478.19, 15611.031],
            [478.78, 15684.304],
            [479.36, 15748.523],
            [479.94, 15812.705],
            [480.52, 15871.370],
            [481.11, 15925.689],
            [481.69, 15976.168],
            [482.27, 16018.665],
            [482.85, 16058.020],
            [483.43, 16092.872],
            [484.01, 16125.896],
            [484.60, 16157.889],
            [485.18, 16183.926],
            [485.76, 16208.982],
            [486.34, 16233.847],
            [486.92, 16251.822],
            [487.51, 16268.656],
            [488.09, 16285.094],
            [488.67, 16296.191],
            [489.25, 16306.871],
            [489.83, 16315.019],
            [490.41, 16318.863],
            [490.99, 16320.744],
            [491.58, 16322.429],
            [492.16, 16322.619],
            [492.74, 16321.467],
            [493.32, 16319.117],
            [493.90, 16315.747],
            [494.48, 16311.288],
            [495.06, 16307.635],
            [495.64, 16302.421],
            [496.23, 16296.911],
            [496.81, 16289.884],
            [497.39, 16283.122],
            [497.97, 16275.253],
            [498.55, 16265.842],
            [499.13, 16255.621],
            [499.71, 16244.202],
            [500.29, 16231.515],
            [500.87, 16218.022],
            [501.45, 16205.621],
            [502.03, 16192.558],
            [502.61, 16178.686],
            [503.20, 16163.736],
            [503.78, 16148.198],
            [504.36, 16133.026],
            [504.94, 16117.242],
            [505.52, 16101.158],
            [506.10, 16085.203],
            [506.68, 16069.498],
            [507.26, 16053.303],
            [507.84, 16036.600],
        ])

        return custom_data1

    def read_data(self, number_of_instances):

        buffer = bytearray()
        data_in_uint16 = []
        reading = True

        while reading:
            raw_data = self.ser.read(self.byte_length * (number_of_instances + 1))
            if raw_data:
                buffer.extend(raw_data)

                while len(buffer) >= self.byte_length:
                    index = buffer.find(self.start_bytes)

                    if index == -1:
                        reading = False
                    elif index > 0:
                        buffer = buffer[index:]

                    if len(buffer) >= self.byte_length:
                        payload = buffer[len(self.start_bytes):self.byte_length]
                        buffer = buffer[self.byte_length:]

                        if len(payload) % 2 != 0:
                            payload = payload[:-1]

                        data = struct.unpack('<2H', payload)

                        data_in_uint16.extend(data)
                    else:
                        reading = False
        return data_in_uint16

    def start_device(self):
        return_value = b'0x00'
        error_instances = 0
        while return_value == b'0x00':
            return_value = self.ser.write(self.start_command)
            sleep(0.01)
            error_instances += 1
            if error_instances > 10:
                break

    def stop_device(self):
        return_value = b'0x00'
        error_instances = 0
        while return_value == b'0x00':
            return_value = self.ser.write(self.stop_command)
            sleep(0.01)
            error_instances += 1
            if error_instances > 10:
                break
